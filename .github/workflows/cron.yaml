name: SPY Preopen Trigger

on:
  schedule:
    # 6:23 AM Pacific DURING Daylight Saving Time (UTC-7)
    # After clocks fall back (UTC-8), change '23 13' -> '23 14'
    - cron: '23 13 * * 1-5'
  workflow_dispatch:

jobs:
  enter_trade:
    runs-on: ubuntu-latest
    env:
      API_URL: https://spy-preopen-api.onrender.com/predict
      HEALTH_URL: https://spy-preopen-api.onrender.com/healthz

      # --- policy knobs ---
      MIN_CONF: "0.60"            # require >= 0.60 confidence
      ALLOW_SIDEWAYS: "false"     # don't trade if Sideways
      REQUIRE_REGIME_PASS: "true" # use regime gates from API

      # --- timing / structure ---
      OR_MINUTES: "10"            # opening range window (mins)
      ENTRY_START_PT: "06:35"     # earliest PT time to consider entries
      ENTRY_END_PT:   "08:30"     # last PT time to take fresh entries

      # --- Alpaca endpoints ---
      ALPACA_TRADING: https://paper-api.alpaca.markets
      ALPACA_DATA:    https://data.alpaca.markets

      # --- contract filters (options) ---
      TARGET_DELTA_MIN: "0.25"
      TARGET_DELTA_MAX: "0.35"
      MIN_OI: "1000"
      MIN_VOL: "200"
      MAX_SPREAD_PCT: "0.05"      # <=5% of mid

      # --- risk & exits (used also by manager) ---
      RISK_PCT: "0.006"           # risk 0.6% of equity per entry
      TAKE_PARTIAL_PCT: "0.30"    # +30% take 50% off
      FAST_TP_PCT: "0.15"         # +15% within TIME_STOP_MIN
      TIME_STOP_MIN: "45"         # if not +15% by 45m, exit
      CLIENT_TAG: "SPYBOT"        # used to tag client_order_id for tracking

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Warm API
        run: |
          for i in {1..6}; do
            c=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || true)
            echo "warm $i -> $c"; [ "$c" = "200" ] && break; sleep 10
          done

      - name: Call SPY API
        id: call
        run: |
          RES=$(curl -sS -m 25 -X POST "$API_URL" -H "Content-Type: application/json" -d '{}' )
          echo "$RES" | jq .
          echo "res=$(echo "$RES" | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: Decide (confidence + regime + non-sideways)
        id: decide
        run: |
          J='${{ steps.call.outputs.res }}'
          MODEL=$(echo "$J" | jq -r '.model_call // "UNKNOWN"')
          CONF=$(echo "$J" | jq -r '.confidence // 0')
          REG=$(echo "$J" | jq -r '.regime_pass // false')
          OK=true
          awk "BEGIN{exit !($CONF >= ${{ env.MIN_CONF }})}" || OK=false
          if [ "${{ env.ALLOW_SIDEWAYS }}" = "false" ] && [ "$MODEL" = "Sideways" ]; then OK=false; fi
          if [ "${{ env.REQUIRE_REGIME_PASS }}" = "true" ] && [ "$REG" != "true" ]; then OK=false; fi
          echo "model=$MODEL" >> "$GITHUB_OUTPUT"
          echo "conf=$CONF" >> "$GITHUB_OUTPUT"
          echo "reg_ok=$REG" >> "$GITHUB_OUTPUT"
          echo "should_trade=$OK" >> "$GITHUB_OUTPUT"

      - name: Email pre-open snapshot
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          to: ${{ secrets.MAIL_USERNAME }}
          from: "SPY Bot <${{ secrets.MAIL_USERNAME }}>"
          subject: ${{ format('SPY Pre-Open: {0} (conf {1})', steps.decide.outputs.model, steps.decide.outputs.conf) }}
          body: |
            model:        ${{ steps.decide.outputs.model }}
            confidence:   ${{ steps.decide.outputs.conf }}
            regime_pass:  ${{ steps.decide.outputs.reg_ok }}
            should_trade: ${{ steps.decide.outputs.should_trade }}
            raw: ${{ steps.call.outputs.res }}

      # --------- structure gate (OR break + VWAP within time window) ----------
      - name: Structure gate (OR+VWAP)
        id: gate
        if: ${{ steps.decide.outputs.should_trade == 'true' }}
        env:
          KEY: ${{ secrets.ALPACA_KEY_ID }}
          SEC: ${{ secrets.ALPACA_SECRET_KEY }}
        run: |
          set -euo pipefail
          now_pt=$(TZ=America/Los_Angeles date +%H:%M)
          [[ "$now_pt" < "${{ env.ENTRY_START_PT }}" || "$now_pt" > "${{ env.ENTRY_END_PT }}" ]] && \
            echo "window_ok=false" >> "$GITHUB_OUTPUT" && exit 0

          START=$(date -u -d '90 minutes ago' +"%Y-%m-%dT%H:%M:%SZ")
          BARS=$(curl -sS "${{ env.ALPACA_DATA }}/v2/stocks/SPY/bars?timeframe=1Min&start=${START}" \
                   -H "APCA-API-KEY-ID: $KEY" -H "APCA-API-SECRET-KEY: $SEC")
          CNT=$(echo "$BARS" | jq '.bars | length')
          [ "$CNT" -lt 10 ] && echo "window_ok=false" >> "$GITHUB_OUTPUT" && exit 0

          OR_N=${{ env.OR_MINUTES }}
          OR_H=$(echo "$BARS" | jq "[.bars[:$OR_N][] | .h] | max")
          OR_L=$(echo "$BARS" | jq "[.bars[:$OR_N][] | .l] | min")

          VW_NUM=$(echo "$BARS" | jq '[.bars[] | ((.c+.h+.l)/3.0) * .v] | add')
          VW_DEN=$(echo "$BARS" | jq '[.bars[] | .v] | add')
          VWAP=$(python3 - <<'PY'
import json,sys
d=json.loads(sys.stdin.read()); n=float(d["n"]); v=float(d["v"])
print(n/v if v>0 else 0)
PY
<<< "{\"n\": $VW_NUM, \"v\": $VW_DEN }")

          LAST=$(echo "$BARS" | jq '.bars[-1].c')
          MODEL='${{ steps.decide.outputs.model }}'
          pass=false
          if [ "$MODEL" = "Up" ]; then
            python3 - <<PY
orh=float($OR_H); last=float($LAST); vwap=float("$VWAP")
print("pass=true" if (last>=orh and last>=vwap) else "pass=false")
PY
          elif [ "$MODEL" = "Down" ]; then
            python3 - <<PY
orl=float($OR_L); last=float($LAST); vwap=float("$VWAP")
print("pass=true" if (last<=orl and last<=vwap) else "pass=false")
PY
          else
            echo "pass=false"
          fi >> "$GITHUB_OUTPUT"

          echo "window_ok=true" >> "$GITHUB_OUTPUT"
          echo "vwap=$VWAP" >> "$GITHUB_OUTPUT"
          echo "orh=$OR_H" >> "$GITHUB_OUTPUT"
          echo "orl=$OR_L" >> "$GITHUB_OUTPUT"

      # ------------------ select option + place entry (IOC ladder) ------------------
      - name: Select option & place IOC ladder
        id: entry
        if: ${{ steps.gate.outputs.window_ok == 'true' && steps.gate.outputs.pass == 'true' }}
        env:
          KEY: ${{ secrets.ALPACA_KEY_ID }}
          SEC: ${{ secrets.ALPACA_SECRET_KEY }}
        run: |
          set -euo pipefail
          DATA="${{ env.ALPACA_DATA }}"; TRD="${{ env.ALPACA_TRADING }}"
          J='${{ steps.decide.outputs.model }}'
          SIDE="call"; [ "$J" = "Down" ] && SIDE="put"

          # underlying quote
          UQ=$(curl -sS "$DATA/v2/stocks/SPY/quotes/latest" -H "APCA-API-KEY-ID: $KEY" -H "APCA-API-SECRET-KEY: $SEC")
          PX=$(echo "$UQ" | jq -r '.quote.ap // .quote.bp')
          [ "$PX" = "null" ] && { echo "no SPY quote"; exit 0; }

          # expiry choice
          now_pt=$(TZ=America/Los_Angeles date +%s)
          cutoff=$(TZ=America/Los_Angeles date -d "$(date +%F) 09:45" +%s)
          dow=$(TZ=America/Los_Angeles date +%u)
          if [ "$now_pt" -lt "$cutoff" ] && [ "$dow" -le 5 ]; then EXP=$(TZ=America/Los_Angeles date +%F); else EXP=$(TZ=America/Los_Angeles date -d "next Friday" +%F); fi

          # candidate strikes around ATM
          ATM=$(python3 - <<PY
import math,sys; print(round(float(sys.argv[1])))
PY
 "$PX")
          strikes=$(python3 - <<PY
atm=int("$ATM"); print(",".join(str(atm+i) for i in range(-6,7)))
PY
)
          RIGHT="$SIDE"
          SYMS=$(python3 - <<PY
import sys
exp,right,sl=sys.argv[1],sys.argv[2],sys.argv[3].split(",")
y,m,d=exp.split("-"); sy=y[2:]; mm=m.zfill(2); dd=d.zfill(2)
out=[]
for s in sl:
    k=int(s)
    out.append(f"SPY{sy}{mm}{dd}{'C' if right=='call' else 'P'}{int(k*1000):08d}")
print(",".join(out))
PY
 "$EXP" "$RIGHT" "$strikes")

          SNAP=$(curl -sS "$DATA/v1beta1/options/snapshots?symbols=$(printf %s "$SYMS" | sed 's/,/%2C/g')" \
                   -H "APCA-API-KEY-ID: $KEY" -H "APCA-API-SECRET-KEY: $SEC" || true)
          ok=$(echo "$SNAP" | jq -r 'has("snapshots")')
          [ "$ok" != "true" ] && { echo "no options snapshots on plan; exit"; exit 0; }

          best=$(echo "$SNAP" | jq -r --argjson dmin ${{ env.TARGET_DELTA_MIN }} --argjson dmax ${{ env.TARGET_DELTA_MAX }} \
                                   --argjson moi ${{ env.MIN_OI }} --argjson mvol ${{ env.MIN_VOL }} --argjson msp ${{ env.MAX_SPREAD_PCT }} '
            .snapshots|to_entries
            | map( .key as $sym
                 | .value as $s
                 | ($s.greeks.delta // null) as $d
                 | ($s.latestQuote | {bp,ap}) as $q
                 | ($s.details.openInterest // 0) as $oi
                 | ($s.dailyBar.v // 0) as $vol
                 | if ($d==null or $q.bp==null or $q.ap==null) then empty else
                     (.spread := ( ($q.ap-$q.bp) / ( ($q.ap+$q.bp)/2.0 ) ))
                     | select($d>=$dmin and $d<=$dmax and $oi>=$moi and $vol>=$mvol and .spread <= $msp)
                     | {sym:$sym, delta:$d, mid:(($q.ap+$q.bp)/2.0), spread:.spread}
                   end)
            | sort_by(.spread) | first
          ')
          [ -z "$best" ] && { echo "no contract passed filters"; exit 0; }

          SYM=$(echo "$best" | jq -r '.sym')
          MID=$(echo "$best" | jq -r '.mid')

          # sizing by equity
          ACCT=$(curl -sS "$TRD/v2/account" -H "APCA-API-KEY-ID: $KEY" -H "APCA-API-SECRET-KEY: $SEC")
          EQ=$(echo "$ACCT" | jq -r '.equity | tonumber')
          QTY=$(python3 - <<PY
import math,sys
eq=float(sys.argv[1]); rp=float(sys.argv[2]); mid=float(sys.argv[3])
qty=math.floor( (eq*rp) / (max(mid,0.01)*100.0) )
print(max(qty,1))
PY
 "$EQ" "${{ env.RISK_PCT }}" "$MID")

          # enforce tiny accounts: at least $200 free cash for one contract
          CASH_OK=$(python3 - <<PY
import sys
eq=float(sys.argv[1]); mid=float(sys.argv[2])
need=mid*100.0
print( int(eq*0.2 >= need) )  # crude guard: require 20% of equity >= premium
PY
 "$EQ" "$MID")
          [ "$CASH_OK" = "0" ] && { echo "cash guard failed (too small for premium)"; exit 0; }

          TAG="${{ env.CLIENT_TAG }}-$(date +%Y%m%d)-$SYM"
          OPENED=""
          for inc in 0 0.01 0.02; do
            LMT=$(python3 - <<PY
import sys
mid=float(sys.argv[1]); inc=float(sys.argv[2])
print(round(mid+inc,2))
PY
 "$MID" "$inc")
            echo "IOC try $SYM @ $LMT x $QTY"
            ORD=$(curl -sS -X POST "$TRD/v2/options/orders" \
                    -H "APCA-API-KEY-ID: $KEY" -H "APCA-API-SECRET-KEY: $SEC" -H "Content-Type: application/json" \
                    -d "$(jq -n --arg sym "$SYM" --arg lmt "$LMT" --arg qty "$QTY" --arg cid "$TAG" \
                          '{symbol:$sym, qty:$qty, side:"buy", type:"limit", time_in_force:"ioc", client_order_id:$cid, limit_price:$lmt}')" || true)
            st=$(echo "$ORD" | jq -r '.status // empty')
            id=$(echo "$ORD" | jq -r '.id // empty')
            echo "status=$st id=$id"
            if [ "$st" = "accepted" ] || [ "$st" = "filled" ] || [ "$st" = "new" ] || [ "$st" = "partially_filled" ]; then
              OPENED="$id"; break
            fi
            sleep 2
          done
          [ -n "$OPENED" ] && echo "opened_id=$OPENED" >> "$GITHUB_OUTPUT"
          echo "opened_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Announce entry (if any)
        if: ${{ steps.entry.outputs.opened_tag != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          to: ${{ secrets.MAIL_USERNAME }}
          from: "SPY Bot <${{ secrets.MAIL_USERNAME }}>"
          subject: Entry tag ${{ steps.entry.outputs.opened_tag }}
          body: |
            Open attempt complete. Tag: ${{ steps.entry.outputs.opened_tag }}
            Order id (if any): ${{ steps.entry.outputs.opened_id }}
