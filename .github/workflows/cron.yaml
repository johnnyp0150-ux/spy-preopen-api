name: SPY Preopen Trigger

on:
  schedule:
    # 6:23 AM Pacific during DST (UTC-7). After clocks fall back, change to '23 14'.
    - cron: '23 13 * * 1-5'
  workflow_dispatch:

jobs:
  call_api:
    runs-on: ubuntu-latest
    env:
      API_URL: https://spy-preopen-api.onrender.com/predict
      TRADE_URL: https://spy-preopen-api.onrender.com/trade
      HEALTH_URL: https://spy-preopen-api.onrender.com/healthz

      # policy knobs
      MIN_CONF: "0.60"
      ALLOW_SIDEWAYS: "false"

      # webhooks
      SHEET_WEBHOOK_URL: ${{ secrets.SHEET_WEBHOOK_URL }} # your Apps Script "deploy as web app" URL

      # auth for API (optional)
      API_BEARER: ${{ secrets.API_TOKEN }} # mirror value you added in Render (optional)

    steps:
      - name: Install jq (JSON)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Warm Render app
        run: |
          for i in {1..6}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || true)
            echo "healthz -> $code"
            [ "$code" = "200" ] && break
            sleep 10
          done

      - name: Call SPY API (with retries)
        id: call
        shell: bash
        run: |
          set -euo pipefail
          HDR=""
          if [ -n "${API_BEARER:-}" ]; then
            HDR="-H 'Authorization: Bearer ${API_BEARER}'"
          fi
          RES=""
          for i in {1..5}; do
            RES=$(bash -lc "curl -sS -m 25 -X POST \"$API_URL\" -H 'Content-Type: application/json' $HDR -d '{}'") || true
            echo "$RES" | jq -e 'has("model_call") and has("confidence")' >/dev/null 2>&1 && break
            echo "Attempt $i not JSON (or missing fields). Sleeping 6sâ€¦"
            sleep 6
          done
          echo "res=$(echo "$RES" | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: Prepare subject/body + decision
        id: prep
        shell: bash
        run: |
          JSON='${{ steps.call.outputs.res }}'
          echo "$JSON" | jq .
          MODEL=$(echo "$JSON" | jq -r '.model_call // "UNKNOWN"')
          CONF=$(echo "$JSON" | jq -r '.confidence // 0')
          GUID=$(echo "$JSON" | jq -r '.guidance // "No guidance"')
          FEAT=$(echo "$JSON" | jq -c '.features // {}')
          REGPASS=$(echo "$JSON" | jq -r '.regime_pass // false')

          MIN_CONF="${MIN_CONF}"
          ALLOW_SIDEWAYS="${ALLOW_SIDEWAYS}"

          SHOULD_TRADE="false"
          if [ "$MODEL" != "UNKNOWN" ]; then
            CONF_OK=$(awk -v a="$CONF" -v b="$MIN_CONF" 'BEGIN{print (a>=b)?"1":"0"}')
            SIDEWAYS_OK="1"; [ "$ALLOW_SIDEWAYS" = "false" ] && [ "$MODEL" = "Sideways" ] && SIDEWAYS_OK="0"
            [ "$CONF_OK" = "1" ] && [ "$SIDEWAYS_OK" = "1" ] && [ "$REGPASS" = "true" ] && SHOULD_TRADE="true"
          fi

          echo "model=$MODEL" >> "$GITHUB_OUTPUT"
          echo "conf=$CONF" >> "$GITHUB_OUTPUT"
          echo "should_trade=$SHOULD_TRADE" >> "$GITHUB_OUTPUT"
          echo "subject=SPY Pre-Open: $MODEL (conf $CONF)" >> "$GITHUB_OUTPUT"
          printf "body<<EOF\nDirection: %s\nConfidence: %s\nGuidance: %s\nFeatures: %s\nTime: %s\nEOF\n" \
            "$MODEL" "$CONF" "$GUID" "$FEAT" "${{ github.run_started_at }}" >> "$GITHUB_OUTPUT"

      - name: Email me the prediction
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          to: ${{ secrets.MAIL_USERNAME }}
          from: "SPY Bot <${{ secrets.MAIL_USERNAME }}>"
          subject: ${{ steps.prep.outputs.subject }}
          body: ${{ steps.prep.outputs.body }}

      - name: Log to Google Sheet
        if: ${{ env.SHEET_WEBHOOK_URL != '' }}
        shell: bash
        run: |
          curl -sS -X POST "$SHEET_WEBHOOK_URL" -H "Content-Type: application/json" \
            -d '{"source":"preopen-cron","row":'${{ steps.call.outputs.res }}'}' | sed -e 's/./&/160' -e 'q'

      - name: Place trade via /trade (only if policy passes)
        if: ${{ steps.prep.outputs.should_trade == 'true' }}
        shell: bash
        run: |
          HDR=""
          if [ -n "${API_BEARER:-}" ]; then
            HDR="-H 'Authorization: Bearer ${API_BEARER}'"
          fi
          BODY=$(jq -n \
            --arg model "${{ steps.prep.outputs.model }}" \
            --argjson conf ${{
              steps.prep.outputs.conf
            }} \
            --argjson regpass true '{model_call:$model, confidence:$conf, regime_pass:$regpass}')
          bash -lc "curl -sS -X POST \"$TRADE_URL\" -H 'Content-Type: application/json' $HDR -d \"$BODY\"" | sed -e 's/./&/200' -e 'q'
